{"version":3,"sources":["BookListing.js","App.js","serviceWorker.js","index.js"],"names":["BookListing","formatAuthors","authors","length","authorsConcat","i","formatCategories","categories","categoriesConcat","className","src","this","props","imgUrl","alt","title","href","volumeUrl","target","rel","description","Component","defaultProps","App","state","books","bookInput","error","handleChange","bind","handleKeyDown","handleSearchClick","setState","getApiRequest","keyword","newKeyword","trim","replace","url","axios","get","then","response","data","items","totalItems","catch","e","name","value","keyCode","onChange","onKeyDown","placeholder","onClick","undefined","id","type","height","width","map","book","key","etag","volumeInfo","imageLinks","thumbnail","canonicalVolumeLink","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05d4c861.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass BookListing extends Component {\n    formatAuthors = (authors) => {\n        if(authors && authors.length > 1) {   \n            let authorsConcat = authors[0];\n\n            for(let i = 1; i < authors.length; i++) {\n                if(i === authors.length - 1) {\n                    authorsConcat += ' and ' + authors[i];\n                    return authorsConcat;\n                }\n                authorsConcat += ', ' + authors[i];\n            }\n        } \n\n        return authors;\n    }\n\n    formatCategories = (categories) => {\n        if(categories && categories.length > 1) {\n            let categoriesConcat = categories[0];\n\n            for(let i = 1; i < categories.length; i++) {\n                categoriesConcat += ' | ' + categories[i];\n            }\n            return categoriesConcat;\n        }\n\n        return categories;\n    }\n\n    render() {\n        return(\n            <div className=\"book\">\n                <img src={this.props.imgUrl} alt={this.props.title} />\n                <div className=\"bookDetails\">\n                    <a href={this.props.volumeUrl} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.title}</a>                    \n                    <p className=\"authors\">by {this.formatAuthors(this.props.authors)}</p>\n                    <p>Category: {this.formatCategories(this.props.categories)}</p>\n                    <p>Description: {this.props.description}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nBookListing.propTypes = {\n    title: PropTypes.string.isRequired,\n    authors: PropTypes.array,\n    categories: PropTypes.array,\n    description: PropTypes.string,\n    imgUrl: PropTypes.string,\n    volumeUrl: PropTypes.string.isRequired\n}\n\nBookListing.defaultProps = {\n    authors: ['Unknown'],\n    categories: ['Unknown'],\n    description: 'Currently unavailable.',\n    imgUrl: 'unknown.jpg'\n}\n\nexport default BookListing;","import React, { Component } from 'react';\nimport BookListing from './BookListing';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner'\nimport './App.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      books: [],\n      bookInput: '',\n      error: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      bookInput: 'harry potter'\n    }, () => {\n      this.getApiRequest(this.state.bookInput);\n    });\n  }\n\n  getApiRequest(keyword) {\n    const newKeyword = keyword.trim().replace(/ /g, '+');\n    const url = `https://www.googleapis.com/books/v1/volumes?q=${newKeyword}&maxResults=40`\n\n    axios.get(url)\n    .then((response) => {\n      this.setState({ books: response.data.items });\n\n      if(response.data.totalItems === 0) {\n        this.setState({ error: `No books found for '${keyword}'.` });\n      }     \n    })\n    .catch((error) => {\n      this.setState({ error: 'There was an error from the api server.' });\n    });\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  handleKeyDown(e) {\n    if(e.keyCode === 13) {\n      this.handleSearchClick();\n    }\n  }\n\n  handleSearchClick() {\n    if (this.state.bookInput.trim() !== '') {\n      this.setState({ error: null });\n      this.getApiRequest(this.state.bookInput);\n    }\n  }\n\n  render() {\n    const { books, error } = this.state;\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Books Collection</h1>\n          <input \n            name=\"bookInput\"\n            value={this.state.bookInput}\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyDown}\n            placeholder=\"Enter title or author\"\n          />\n          <button onClick={this.handleSearchClick}>Search</button>          \n          {(books === undefined || !books.length) && !error && (\n            <div id=\"loader\">\n              <Loader\n                type=\"CradleLoader\"\n                height={100}\n                width={100} \n              />\n            </div>            \n          )}\n          {books && (\n            <ul>\n              {books.map((book) => \n                <li key={book.etag}>\n                  <BookListing \n                    title={book.volumeInfo.title}\n                    authors={book.volumeInfo.authors}\n                    categories={book.volumeInfo.categories}\n                    description={book.volumeInfo.description}\n                    imgUrl={book.volumeInfo.imageLinks && book.volumeInfo.imageLinks.thumbnail}\n                    volumeUrl={book.volumeInfo.canonicalVolumeLink}\n                  />\n                </li>\n              )}\n            </ul>\n          )}          \n          {error && (\n            <div className=\"book\" style={{ marginTop:16 }}>\n              <p>{error}</p>\n            </div>\n            )}\n        </header>\n      </div>\n    );\n  }  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}